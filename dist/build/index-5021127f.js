
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(window.document);
import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, e as element, a as space, t as text, b as attr_dev, c as add_location, f as insert_dev, g as append_dev, h as set_data_dev, n as noop, j as detach_dev } from './main-2aa23ed2.js';

/* src/pages/index.svelte generated by Svelte v3.32.1 */

const file = "src/pages/index.svelte";

function create_fragment(ctx) {
	let main;
	let div0;
	let img0;
	let img0_src_value;
	let t0;
	let h1;
	let t1;
	let t2;
	let t3;
	let t4;
	let t5;
	let div1;
	let a0;
	let t7;
	let a1;
	let t9;
	let div2;
	let h4;
	let t11;
	let h5;
	let t13;
	let p0;
	let t15;
	let p1;
	let em;
	let t17;
	let div3;
	let img1;
	let img1_src_value;
	let t18;
	let p2;
	let t20;
	let p3;
	let t22;
	let div6;
	let div4;
	let img2;
	let img2_src_value;
	let t23;
	let img3;
	let img3_src_value;
	let t24;
	let img4;
	let img4_src_value;
	let t25;
	let div5;
	let p4;
	let strong;
	let t27;
	let t28;
	let div9;
	let div7;
	let h2;
	let t30;
	let p5;
	let t32;
	let div8;
	let img5;
	let img5_src_value;
	let t33;
	let img6;
	let img6_src_value;

	const block = {
		c: function create() {
			main = element("main");
			div0 = element("div");
			img0 = element("img");
			t0 = space();
			h1 = element("h1");
			t1 = text(/*name*/ ctx[0]);
			t2 = text("'s ");
			t3 = text(/*thingWeSell*/ ctx[1]);
			t4 = text(":");
			t5 = space();
			div1 = element("div");
			a0 = element("a");
			a0.textContent = "Daily Sales";
			t7 = space();
			a1 = element("a");
			a1.textContent = "All Locations";
			t9 = space();
			div2 = element("div");
			h4 = element("h4");
			h4.textContent = "Open Daily from 6AM-8PM.";
			t11 = space();
			h5 = element("h5");
			h5.textContent = "Our Cookie HQ:";
			t13 = space();
			p0 = element("p");
			p0.textContent = "102 1st Ave S #102, Seattle, WA 98104";
			t15 = space();
			p1 = element("p");
			em = element("em");
			em.textContent = "We're located right next to Cow Chip Cookies!";
			t17 = space();
			div3 = element("div");
			img1 = element("img");
			t18 = space();
			p2 = element("p");
			p2.textContent = "In 2020, Pat's Salmon Cookies originated by combining two signature Seattle icons; a coffee time confection mixed with a slight salmon twist.";
			t20 = space();
			p3 = element("p");
			p3.textContent = "Cupcake ipsum dolor sit amet. Ice cream sweet roll sesame snaps apple pie jelly-o sweet roll jelly beans I love candy. Tootsie roll drag√©e sweet roll cotton candy jelly-o. Sweet fruitcake wafer bonbon. Cookie marshmallow gingerbread. Cake carrot cake gummi bears. Gingerbread I love candy liquorice caramels tiramisu. Icing I love tootsie roll cheesecake carrot cake powder caramels apple pie. Liquorice tiramisu cookie I love. Oat cake cheesecake fruitcake fruitcake donut I love chupa chups cheesecake liquorice. Bonbon brownie candy canes. Tootsie roll pie macaroon sweet roll marzipan jelly donut lollipop marshmallow. Carrot cake icing I love cake cotton candy brownie dessert toffee.";
			t22 = space();
			div6 = element("div");
			div4 = element("div");
			img2 = element("img");
			t23 = space();
			img3 = element("img");
			t24 = space();
			img4 = element("img");
			t25 = space();
			div5 = element("div");
			p4 = element("p");
			strong = element("strong");
			strong.textContent = "The cookie making process:";
			t27 = text(" all began with what Pat saw as the most family friendly looking salmon image. He knew he wanted his cookies to look just like a salmon. After some logistical and design decisions, Pat outfitted a metal cookie cutter to the shape. Finally, the cookies wouldn't be finished without their signature frosting.");
			t28 = space();
			div9 = element("div");
			div7 = element("div");
			h2 = element("h2");
			h2.textContent = "Offical Salmon Cookie Merchandise:";
			t30 = space();
			p5 = element("p");
			p5.textContent = "In additon to cookies, Pat's Salmon Cookies also sells prints of a Chinook Salmon & T-Shirts!";
			t32 = space();
			div8 = element("div");
			img5 = element("img");
			t33 = space();
			img6 = element("img");
			if (img0.src !== (img0_src_value = "https://codefellows.github.io/code-201-guide/curriculum/class-06/lab/assets/salmon.png")) attr_dev(img0, "src", img0_src_value);
			attr_dev(img0, "width", "500");
			add_location(img0, file, 7, 4, 95);
			attr_dev(h1, "id", "title");
			attr_dev(h1, "class", "svelte-1tky8bj");
			add_location(h1, file, 8, 4, 210);
			attr_dev(div0, "id", "header");
			add_location(div0, file, 6, 2, 73);
			attr_dev(a0, "href", "/sales/index.html");
			add_location(a0, file, 12, 4, 286);
			attr_dev(a1, "href", "/stores/index.html");
			add_location(a1, file, 13, 4, 334);
			attr_dev(div1, "id", "nav");
			add_location(div1, file, 11, 2, 266);
			add_location(h4, file, 17, 4, 413);
			add_location(h5, file, 18, 4, 451);
			add_location(p0, file, 19, 4, 479);
			add_location(em, file, 20, 7, 532);
			add_location(p1, file, 20, 4, 529);
			attr_dev(div2, "id", "main");
			add_location(div2, file, 16, 2, 393);
			if (img1.src !== (img1_src_value = "https://github.com/codefellows/seattle-201d67/blob/master/class-08/lab-b/assets/family.jpg?raw=true")) attr_dev(img1, "src", img1_src_value);
			attr_dev(img1, "id", "family");
			attr_dev(img1, "width", "40%");
			add_location(img1, file, 23, 4, 623);
			add_location(p2, file, 24, 4, 763);
			add_location(p3, file, 25, 4, 916);
			attr_dev(div3, "id", "about");
			add_location(div3, file, 22, 2, 602);
			if (img2.src !== (img2_src_value = "https://github.com/codefellows/seattle-201d67/blob/master/class-08/lab-b/assets/fish.jpg?raw=true")) attr_dev(img2, "src", img2_src_value);
			attr_dev(img2, "height", "100px");
			add_location(img2, file, 30, 6, 1660);
			if (img3.src !== (img3_src_value = "https://github.com/codefellows/seattle-201d67/blob/master/class-08/lab-b/assets/cutter.jpeg?raw=true")) attr_dev(img3, "src", img3_src_value);
			attr_dev(img3, "height", "100px");
			add_location(img3, file, 31, 6, 1791);
			if (img4.src !== (img4_src_value = "https://github.com/codefellows/seattle-201d67/blob/master/class-08/lab-b/assets/frosted-cookie.jpg?raw=true")) attr_dev(img4, "src", img4_src_value);
			attr_dev(img4, "height", "100px");
			add_location(img4, file, 32, 6, 1925);
			add_location(div4, file, 29, 4, 1648);
			add_location(strong, file, 35, 9, 2091);
			add_location(p4, file, 35, 6, 2088);
			add_location(div5, file, 34, 4, 2076);
			attr_dev(div6, "id", "cookies");
			add_location(div6, file, 28, 2, 1625);
			add_location(h2, file, 42, 6, 2509);
			add_location(p5, file, 43, 6, 2559);
			add_location(div7, file, 41, 4, 2497);
			if (img5.src !== (img5_src_value = "https://github.com/codefellows/seattle-201d67/blob/master/class-08/lab-b/assets/chinook.jpg?raw=true")) attr_dev(img5, "src", img5_src_value);
			attr_dev(img5, "height", "200");
			add_location(img5, file, 46, 6, 2687);
			if (img6.src !== (img6_src_value = "https://github.com/codefellows/seattle-201d67/blob/master/class-08/lab-b/assets/shirt.jpg?raw=true")) attr_dev(img6, "src", img6_src_value);
			attr_dev(img6, "height", "200px");
			add_location(img6, file, 47, 6, 2819);
			add_location(div8, file, 45, 4, 2675);
			attr_dev(div9, "id", "merch");
			add_location(div9, file, 40, 2, 2476);
			attr_dev(main, "class", "svelte-1tky8bj");
			add_location(main, file, 5, 0, 64);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, main, anchor);
			append_dev(main, div0);
			append_dev(div0, img0);
			append_dev(div0, t0);
			append_dev(div0, h1);
			append_dev(h1, t1);
			append_dev(h1, t2);
			append_dev(h1, t3);
			append_dev(h1, t4);
			append_dev(main, t5);
			append_dev(main, div1);
			append_dev(div1, a0);
			append_dev(div1, t7);
			append_dev(div1, a1);
			append_dev(main, t9);
			append_dev(main, div2);
			append_dev(div2, h4);
			append_dev(div2, t11);
			append_dev(div2, h5);
			append_dev(div2, t13);
			append_dev(div2, p0);
			append_dev(div2, t15);
			append_dev(div2, p1);
			append_dev(p1, em);
			append_dev(main, t17);
			append_dev(main, div3);
			append_dev(div3, img1);
			append_dev(div3, t18);
			append_dev(div3, p2);
			append_dev(div3, t20);
			append_dev(div3, p3);
			append_dev(main, t22);
			append_dev(main, div6);
			append_dev(div6, div4);
			append_dev(div4, img2);
			append_dev(div4, t23);
			append_dev(div4, img3);
			append_dev(div4, t24);
			append_dev(div4, img4);
			append_dev(div6, t25);
			append_dev(div6, div5);
			append_dev(div5, p4);
			append_dev(p4, strong);
			append_dev(p4, t27);
			append_dev(main, t28);
			append_dev(main, div9);
			append_dev(div9, div7);
			append_dev(div7, h2);
			append_dev(div7, t30);
			append_dev(div7, p5);
			append_dev(div9, t32);
			append_dev(div9, div8);
			append_dev(div8, img5);
			append_dev(div8, t33);
			append_dev(div8, img6);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*name*/ 1) set_data_dev(t1, /*name*/ ctx[0]);
			if (dirty & /*thingWeSell*/ 2) set_data_dev(t3, /*thingWeSell*/ ctx[1]);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(main);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Pages", slots, []);
	let { name } = $$props;
	let { thingWeSell } = $$props;
	const writable_props = ["name", "thingWeSell"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Pages> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("name" in $$props) $$invalidate(0, name = $$props.name);
		if ("thingWeSell" in $$props) $$invalidate(1, thingWeSell = $$props.thingWeSell);
	};

	$$self.$capture_state = () => ({ name, thingWeSell });

	$$self.$inject_state = $$props => {
		if ("name" in $$props) $$invalidate(0, name = $$props.name);
		if ("thingWeSell" in $$props) $$invalidate(1, thingWeSell = $$props.thingWeSell);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [name, thingWeSell];
}

class Pages extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { name: 0, thingWeSell: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Pages",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*name*/ ctx[0] === undefined && !("name" in props)) {
			console.warn("<Pages> was created without expected prop 'name'");
		}

		if (/*thingWeSell*/ ctx[1] === undefined && !("thingWeSell" in props)) {
			console.warn("<Pages> was created without expected prop 'thingWeSell'");
		}
	}

	get name() {
		throw new Error("<Pages>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set name(value) {
		throw new Error("<Pages>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get thingWeSell() {
		throw new Error("<Pages>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set thingWeSell(value) {
		throw new Error("<Pages>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Pages;
//# sourceMappingURL=index-5021127f.js.map
