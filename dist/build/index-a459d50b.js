
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(window.document);
import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, e as element, a as space, t as text, c as add_location, b as attr_dev, f as insert_dev, g as append_dev, n as noop, j as detach_dev } from './main-2aa23ed2.js';

/* src/pages/sales/index.svelte generated by Svelte v3.32.1 */

const file = "src/pages/sales/index.svelte";

function create_fragment(ctx) {
	let main_1;
	let div;
	let fieldset;
	let legend;
	let t1;
	let label0;
	let t2;
	let br0;
	let t3;
	let input0;
	let t4;
	let br1;
	let t5;
	let label1;
	let t6;
	let br2;
	let t7;
	let input1;
	let t8;
	let br3;
	let t9;
	let label2;
	let t10;
	let br4;
	let t11;
	let input2;
	let t12;
	let br5;
	let t13;
	let label3;
	let t14;
	let br6;
	let t15;
	let input3;
	let t16;
	let br7;
	let t17;
	let input4;

	const block = {
		c: function create() {
			main_1 = element("main");
			div = element("div");
			fieldset = element("fieldset");
			legend = element("legend");
			legend.textContent = "Add New Store Location:";
			t1 = space();
			label0 = element("label");
			t2 = text("Location: ");
			br0 = element("br");
			t3 = space();
			input0 = element("input");
			t4 = space();
			br1 = element("br");
			t5 = space();
			label1 = element("label");
			t6 = text("Minimum Hourly Customer: ");
			br2 = element("br");
			t7 = space();
			input1 = element("input");
			t8 = space();
			br3 = element("br");
			t9 = space();
			label2 = element("label");
			t10 = text("Maximum Hourly Customer: ");
			br4 = element("br");
			t11 = space();
			input2 = element("input");
			t12 = space();
			br5 = element("br");
			t13 = space();
			label3 = element("label");
			t14 = text("Average Cookie(s) Per Sale: ");
			br6 = element("br");
			t15 = space();
			input3 = element("input");
			t16 = space();
			br7 = element("br");
			t17 = space();
			input4 = element("input");
			add_location(legend, file, 148, 6, 4620);
			add_location(br0, file, 149, 23, 4684);
			attr_dev(input0, "type", "text");
			attr_dev(input0, "id", "loc");
			add_location(input0, file, 150, 8, 4697);
			add_location(br1, file, 150, 38, 4727);
			add_location(label0, file, 149, 6, 4667);
			add_location(br2, file, 152, 38, 4785);
			attr_dev(input1, "type", "text");
			attr_dev(input1, "id", "min");
			add_location(input1, file, 153, 8, 4798);
			add_location(br3, file, 153, 37, 4827);
			add_location(label1, file, 152, 6, 4753);
			add_location(br4, file, 155, 38, 4885);
			attr_dev(input2, "type", "text");
			attr_dev(input2, "id", "max");
			add_location(input2, file, 156, 8, 4898);
			add_location(br5, file, 156, 37, 4927);
			add_location(label2, file, 155, 6, 4853);
			add_location(br6, file, 158, 41, 4988);
			attr_dev(input3, "type", "text");
			attr_dev(input3, "id", "avg");
			add_location(input3, file, 159, 8, 5001);
			add_location(br7, file, 159, 37, 5030);
			add_location(label3, file, 158, 6, 4953);
			attr_dev(input4, "type", "button");
			attr_dev(input4, "id", "submit");
			input4.value = "Submit Data";
			add_location(input4, file, 161, 6, 5056);
			add_location(fieldset, file, 147, 4, 4603);
			add_location(div, file, 146, 2, 4593);
			add_location(main_1, file, 145, 0, 4584);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, main_1, anchor);
			append_dev(main_1, div);
			append_dev(div, fieldset);
			append_dev(fieldset, legend);
			append_dev(fieldset, t1);
			append_dev(fieldset, label0);
			append_dev(label0, t2);
			append_dev(label0, br0);
			append_dev(label0, t3);
			append_dev(label0, input0);
			append_dev(label0, t4);
			append_dev(label0, br1);
			append_dev(fieldset, t5);
			append_dev(fieldset, label1);
			append_dev(label1, t6);
			append_dev(label1, br2);
			append_dev(label1, t7);
			append_dev(label1, input1);
			append_dev(label1, t8);
			append_dev(label1, br3);
			append_dev(fieldset, t9);
			append_dev(fieldset, label2);
			append_dev(label2, t10);
			append_dev(label2, br4);
			append_dev(label2, t11);
			append_dev(label2, input2);
			append_dev(label2, t12);
			append_dev(label2, br5);
			append_dev(fieldset, t13);
			append_dev(fieldset, label3);
			append_dev(label3, t14);
			append_dev(label3, br6);
			append_dev(label3, t15);
			append_dev(label3, input3);
			append_dev(label3, t16);
			append_dev(label3, br7);
			append_dev(fieldset, t17);
			append_dev(fieldset, input4);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(main_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Sales", slots, []);

	var CreateStore = function (location, minCust, maxCust, avgSale) {
		this.location = location;
		this.minCust = minCust;
		this.maxCust = maxCust;
		this.avgSale = avgSale;
		this.allCookies = [];

		this.getCustomers = function () {
			return computeCustomers(this.maxCust, this.minCust);
		};

		this.cookiesSold = function () {
			var cookies = [0];
			var total = 0;

			for (var i = 0; i < 14; i++) {
				var sold = Math.round(this.getCustomers() * this.avgSale);
				total = total + sold;
				cookies[i] = sold;
			}

			cookies[cookies.length] = total;
			this.allCookies = cookies;
		};

		this.render = function (cookies, location) {
			return printCookieSales(cookies, location);
		};
	};

	// computes random customer amount
	var computeCustomers = function (max, min) {
		var customers = Math.random() * (max - min) + min;
		return customers;
	};

	// for printing cookies during a given time
	var printCookieSales = function (cookies, location) {
		makeRow(location);
		addItem(location, location);

		for (var i = 0; i < cookies.length; i++) {
			var input = cookies[i] + " cookies";
			addItem(location, input);
		}
	};

	// responsible for creating table header
	var makeHeader = function (times) {
		makeRow("header");
		var newHeader = document.createElement("th");
		var position = document.getElementById("header");
		position.appendChild(newHeader);

		for (var i = 0; i < times.length; i++) {
			newHeader = document.createElement("th");
			position = document.getElementById("header");
			newHeader.textContent = times[i];
			position.appendChild(newHeader);
		}
	};

	// responsible for creating the table footer totals 
	var makeFooter = function (stores) {
		makeRow("footer");
		addItem("footer", "Totals");

		for (var i = 0; i < 15; i++) {
			var hourly = 0;

			for (var j = 0; j < stores.length; j++) {
				hourly = hourly + stores[j].allCookies[i];
			}

			addItem("footer", hourly);
		}
	};

	// responsible for creating a new table element
	var makeTable = function () {
		var newTable = document.createElement("table");
		var position = document.querySelector("main");
		newTable.setAttribute("id", "sales");
		position.appendChild(newTable);
	};

	// responsible for creating a new row element
	var makeRow = function (location) {
		var newRow = document.createElement("tr");
		var position = document.getElementById("sales");
		newRow.setAttribute("id", location);
		position.appendChild(newRow);
	};

	// responsible for adding a new cell to row 
	var addItem = function (location, text) {
		var newItem = document.createElement("td");
		var position = document.getElementById(location);
		newItem.textContent = text;
		position.appendChild(newItem);
	};

	// using constructor function to create stores
	var seattle = new CreateStore("Seattle", 23, 65, 6.3);

	var tokyo = new CreateStore("Tokyo", 3, 24, 1.2);
	var dubai = new CreateStore("Dubai", 11, 38, 3.7);
	var paris = new CreateStore("Paris", 20, 38, 2.3);
	var lima = new CreateStore("Lima", 2, 16, 4.6);
	var allStores = [seattle, tokyo, dubai, paris, lima];

	// responsible for storing form values
	var setFormValues = function () {
		var location = document.getElementById("loc").value;
		var minimum = document.getElementById("min").value;
		var maximum = document.getElementById("max").value;
		var average = document.getElementById("avg").value;
		var store = new CreateStore(location, minimum, maximum, average);
		appendForm(store);
	};

	// appends the form to the table, updates footer
	var appendForm = function (newStore) {
		if (document.getElementById("footer")) {
			var footer = document.getElementById("footer");
			footer.remove();
		}

		newStore.cookiesSold();
		newStore.render(newStore.allCookies, newStore.location);
		allStores.push(newStore);
		makeFooter(allStores);
	};

	// calls for function for storing values on event click
	var submitEl = document.getElementById("submit");

	submitEl.onclick = setFormValues;

	// puts everything together
	var main = function (stores) {
		var time = [
			"6am",
			"7am",
			"8am",
			"9am",
			"10am",
			"11am",
			"12pm",
			"1pm",
			"2pm",
			"3pm",
			"4pm",
			"5pm",
			"6pm",
			"7pm",
			"Total"
		];

		makeTable();
		makeHeader(time);

		for (var i = 0; i < stores.length; i++) {
			stores[i].cookiesSold();
			stores[i].render(stores[i].allCookies, stores[i].location);
		}

		makeFooter(stores);
	};

	main(allStores);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Sales> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({
		CreateStore,
		computeCustomers,
		printCookieSales,
		makeHeader,
		makeFooter,
		makeTable,
		makeRow,
		addItem,
		seattle,
		tokyo,
		dubai,
		paris,
		lima,
		allStores,
		setFormValues,
		appendForm,
		submitEl,
		main
	});

	$$self.$inject_state = $$props => {
		if ("CreateStore" in $$props) CreateStore = $$props.CreateStore;
		if ("computeCustomers" in $$props) computeCustomers = $$props.computeCustomers;
		if ("printCookieSales" in $$props) printCookieSales = $$props.printCookieSales;
		if ("makeHeader" in $$props) makeHeader = $$props.makeHeader;
		if ("makeFooter" in $$props) makeFooter = $$props.makeFooter;
		if ("makeTable" in $$props) makeTable = $$props.makeTable;
		if ("makeRow" in $$props) makeRow = $$props.makeRow;
		if ("addItem" in $$props) addItem = $$props.addItem;
		if ("seattle" in $$props) seattle = $$props.seattle;
		if ("tokyo" in $$props) tokyo = $$props.tokyo;
		if ("dubai" in $$props) dubai = $$props.dubai;
		if ("paris" in $$props) paris = $$props.paris;
		if ("lima" in $$props) lima = $$props.lima;
		if ("allStores" in $$props) allStores = $$props.allStores;
		if ("setFormValues" in $$props) setFormValues = $$props.setFormValues;
		if ("appendForm" in $$props) appendForm = $$props.appendForm;
		if ("submitEl" in $$props) submitEl = $$props.submitEl;
		if ("main" in $$props) main = $$props.main;
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [];
}

class Sales extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Sales",
			options,
			id: create_fragment.name
		});
	}
}

export default Sales;
//# sourceMappingURL=index-a459d50b.js.map
